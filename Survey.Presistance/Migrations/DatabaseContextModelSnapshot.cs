// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survey.Presistance.Contexts;

namespace Survey.Presistance.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Survey.Domain.Entities.Respond.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OptionId");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Respond.Respond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("SurveyId");

                    b.Property<int?>("UserId");

                    b.Property<string>("UserInfo");

                    b.Property<string>("UserIp");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("Responds");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Survey.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("QuestionId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 1,
                            Title = "Developer, back-end"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 1,
                            Title = "Developer, front-end"
                        },
                        new
                        {
                            Id = 3,
                            QuestionId = 1,
                            Title = "Developer, desktop or enterprise applications "
                        },
                        new
                        {
                            Id = 4,
                            QuestionId = 1,
                            Title = "Developer, mobile "
                        },
                        new
                        {
                            Id = 5,
                            QuestionId = 1,
                            Title = "DevOps specialist"
                        },
                        new
                        {
                            Id = 6,
                            QuestionId = 1,
                            Title = "Database administrator "
                        },
                        new
                        {
                            Id = 7,
                            QuestionId = 1,
                            Title = "Designer"
                        },
                        new
                        {
                            Id = 8,
                            QuestionId = 1,
                            Title = "System administrator "
                        },
                        new
                        {
                            Id = 9,
                            QuestionId = 1,
                            Title = "Developer, embedded applications or devices"
                        },
                        new
                        {
                            Id = 10,
                            QuestionId = 1,
                            Title = "Data or business analyst "
                        },
                        new
                        {
                            Id = 11,
                            QuestionId = 1,
                            Title = "Data scientist or machine learning specialist "
                        },
                        new
                        {
                            Id = 12,
                            QuestionId = 1,
                            Title = "Developer, QA or test "
                        },
                        new
                        {
                            Id = 13,
                            QuestionId = 1,
                            Title = "Engineer, data"
                        },
                        new
                        {
                            Id = 14,
                            QuestionId = 1,
                            Title = "Academic researcher "
                        },
                        new
                        {
                            Id = 15,
                            QuestionId = 1,
                            Title = "Educator "
                        },
                        new
                        {
                            Id = 16,
                            QuestionId = 1,
                            Title = "Developer, game or graphics "
                        },
                        new
                        {
                            Id = 17,
                            QuestionId = 1,
                            Title = "Engineering manager "
                        },
                        new
                        {
                            Id = 18,
                            QuestionId = 1,
                            Title = "Product manager"
                        },
                        new
                        {
                            Id = 19,
                            QuestionId = 1,
                            Title = "Scientist"
                        },
                        new
                        {
                            Id = 20,
                            QuestionId = 1,
                            Title = "Engineer, site reliability"
                        },
                        new
                        {
                            Id = 21,
                            QuestionId = 1,
                            Title = "Senior executive/VP "
                        },
                        new
                        {
                            Id = 22,
                            QuestionId = 1,
                            Title = "Marketing or sales professional "
                        },
                        new
                        {
                            Id = 23,
                            QuestionId = 1,
                            Title = "Marketing or sales professional "
                        },
                        new
                        {
                            Id = 24,
                            QuestionId = 2,
                            Title = "Yes"
                        },
                        new
                        {
                            Id = 25,
                            QuestionId = 2,
                            Title = "No "
                        },
                        new
                        {
                            Id = 26,
                            QuestionId = 3,
                            Title = "Less than 5 years "
                        },
                        new
                        {
                            Id = 27,
                            QuestionId = 3,
                            Title = "5 to 9 years"
                        },
                        new
                        {
                            Id = 28,
                            QuestionId = 3,
                            Title = "10 to 14 years "
                        },
                        new
                        {
                            Id = 29,
                            QuestionId = 3,
                            Title = "15 to 19 years "
                        },
                        new
                        {
                            Id = 30,
                            QuestionId = 3,
                            Title = "20 to 24 years"
                        },
                        new
                        {
                            Id = 31,
                            QuestionId = 3,
                            Title = "25 to 29 years"
                        },
                        new
                        {
                            Id = 32,
                            QuestionId = 3,
                            Title = "30 to 34 years"
                        },
                        new
                        {
                            Id = 33,
                            QuestionId = 3,
                            Title = "35 to 39 years "
                        },
                        new
                        {
                            Id = 34,
                            QuestionId = 3,
                            Title = "40 to 44 years "
                        },
                        new
                        {
                            Id = 35,
                            QuestionId = 3,
                            Title = "45 to 49 years "
                        },
                        new
                        {
                            Id = 36,
                            QuestionId = 3,
                            Title = "50 years or more"
                        });
                });

            modelBuilder.Entity("Survey.Domain.Entities.Survey.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("SurveyId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SurveyId = 1,
                            Title = "Developer Type"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Many developers work on code outside of work. About 78% of our respondents say that they code as a hobby. Other responsibilities outside of software can reduce developers' engagement in coding as a hobby; developers who say they have children or other caretaking responsibilities are less likely to code as a hobby. Respondents who are women are also less likely to say they code as a hobby.",
                            SurveyId = 1,
                            Title = "Coding as a Hobby "
                        },
                        new
                        {
                            Id = 3,
                            Description = "Experience",
                            SurveyId = 1,
                            Title = "Years Since Learning to Code "
                        });
                });

            modelBuilder.Entity("Survey.Domain.Entities.Survey.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsRemoved");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsRemoved = false,
                            Title = "Developer Roles",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Survey.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "m@m.com",
                            FullName = "Admin",
                            IsActive = true,
                            PasswordHash = "384004178",
                            PasswordSalt = "790966436"
                        });
                });

            modelBuilder.Entity("Survey.Domain.Entities.Respond.Answer", b =>
                {
                    b.HasOne("Survey.Domain.Entities.Survey.Option", "Option")
                        .WithMany("Answers")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Domain.Entities.Respond.Respond", b =>
                {
                    b.HasOne("Survey.Domain.Entities.Survey.Survey", "Suurvey")
                        .WithMany("Responds")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survey.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Survey.Option", b =>
                {
                    b.HasOne("Survey.Domain.Entities.Survey.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Domain.Entities.Survey.Question", b =>
                {
                    b.HasOne("Survey.Domain.Entities.Survey.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Domain.Entities.Survey.Survey", b =>
                {
                    b.HasOne("Survey.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
